@(
    model: casualteam.openapigenerator.Model.Object,
    getModelType: (casualteam.openapigenerator.Model,Boolean) => String,
    getValidationCode: casualteam.openapigenerator.Model => String
    )

implicit lazy val m@{scala.util.Random.alphanumeric.take(10).mkString}:Encoder[@getModelType(model, true)] =
    @defining(model.fields.keys.toList){ fields =>
        Encoder.forProduct@{fields.size}(
            @for((f,i) <- fields.zipWithIndex) { "@f" @if(i < fields.size -1){,} }
        )(in => (
            @for((f,i) <- fields.zipWithIndex) { in.`@f` @if(i < fields.size -1){,} }
        ))
    }

@modelValidation(model: casualteam.openapigenerator.Model, required: Boolean) = @{
    val validation = getValidationCode(model)
    if (validation.nonEmpty){
        if(required) Some(s"validationEncoder($validation)")
        else Some(s"validationEncoderOption($validation)")
    } else None
}

implicit lazy val m@{scala.util.Random.alphanumeric.take(10).mkString}:Decoder[@getModelType(model, true)] =
    Decoder.instance[@getModelType(model, true)] { c =>
        for {
            @for((f,i) <- model.fields.zipWithIndex) {
                @defining(modelValidation(f._2.model,f._2.required)) { validations =>
                    f@i <- c.downField("@{f._1}").as[@getModelType(f._2.model,f._2.required)]@{validations.map(v => s"($v)").getOrElse("")}
                }
            }
        } yield {
            @getModelType(model, true) (
                @for((f,i) <- model.fields.zipWithIndex) {
                  `@{f._1}` = f@i @if(i < model.fields.size -1){,}
                }
            )
        }
    }
@(
    model: casualteam.openapigenerator.Model.Object,
    getModelType: (casualteam.openapigenerator.Model,Boolean) => String,
    )
implicit lazy val m@{scala.util.Random.alphanumeric.take(10).mkString}:Encoder[@getModelType(model, true)] =
    @defining(model.fields.keys.toList){ fields =>
        Encoder.forProduct@{fields.size}(
            @for((f,i) <- fields.zipWithIndex) { "@f" @if(i < fields.size -1){,} }
        )(in => (
            @for((f,i) <- fields.zipWithIndex) { in.`@f` @if(i < fields.size -1){,} }
        ))
    }

@modelValidation(model: casualteam.openapigenerator.Model, required: Boolean) = @{
    val validations = casualteam.openapigenerator.Model.fold(model)(
        ref => Nil,
        _object => Nil,
        typedMap => Nil,
        freeMap => Nil,
        string => {
            Seq(
                string.minLength.map(minLength => s"Validation.minLengthString($minLength)"),
                string.maxLength.map(maxLength => s"Validation.maxLengthString($maxLength)")
            ).flatten
        },
        integer => {
           Seq(
               integer.min.map(min => s"Validation.min[${getModelType(model,true)}]($min)"),
               integer.max.map(max => s"Validation.max[${getModelType(model,true)}]($max)")
           ).flatten
       },
        dateTime => Nil,
        boolean => Nil,
        array => {
             Seq(
                 array.minLength.map(minLength => s"Validation.minLength[${getModelType(model,true)}]($minLength)"),
                 array.maxLength.map(maxLength => s"Validation.maxLength[${getModelType(model,true)}]($maxLength)")
             ).flatten
         },
        file => Nil
    )
    if (validations.nonEmpty){
        val validationOp = validations.mkString(" _ combine ")
        if(required) Some(s"validationEncoder($validationOp)")
        else Some(s"validationEncoderOption($validationOp)")
    } else None
}

implicit lazy val m@{scala.util.Random.alphanumeric.take(10).mkString}:Decoder[@getModelType(model, true)] =
    Decoder.instance[@getModelType(model, true)] { c =>
        for {
            @for((f,i) <- model.fields.zipWithIndex) {
                @defining(modelValidation(f._2.model,f._2.required)) { validations =>
                    f@i <- c.downField("@{f._1}").as[@getModelType(f._2.model,f._2.required)]@{validations.map(v => s"($v)").getOrElse("")}
                }
            }
        } yield {
            @getModelType(model, true) (
                @for((f,i) <- model.fields.zipWithIndex) {
                  `@{f._1}` = f@i @if(i < model.fields.size -1){,}
                }
            )
        }
    }
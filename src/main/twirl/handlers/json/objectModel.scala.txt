@(
    model: casualteam.openapigenerator.Model.Object,
    getModelType: (casualteam.openapigenerator.Model,Boolean) => String,
    getValidationCode: casualteam.openapigenerator.Model => String
    )

implicit lazy val m@{scala.util.Random.alphanumeric.take(10).mkString}:Encoder[@getModelType(model, true)] =
    @defining(model.fields.keys.toList){ fields =>
        Encoder.instance(in => JsonObject(
            @for((f,i) <- fields.zipWithIndex) {
                "@f" -> in.`@f`.asJson @if(i < fields.size -1){,}
            }
        ).asJson)
    }

@modelDecoder(model: casualteam.openapigenerator.Model, required: Boolean) = @{
    def _modelDecoder(model: casualteam.openapigenerator.Model, required: Boolean): String = {
        val validation = getValidationCode(model)
        val decoderBase = s"validationDecoder($validation)"
        val decoder = model match{
            case _array:casualteam.openapigenerator.Model.Array =>
                s"$decoderBase(Decoder.decodeList(${_modelDecoder(_array.itemModel, true)}))"
            case other =>
                decoderBase
        }
        if(required) s"($decoder)"
        else s"(Decoder.decodeOption($decoder))"
    }
    _modelDecoder(model, required)
}

implicit lazy val m@{scala.util.Random.alphanumeric.take(10).mkString}:Decoder[@getModelType(model, true)] =
    Decoder.instance[@getModelType(model, true)] { c =>
        for {
            @for((f,i) <- model.fields.zipWithIndex) {
                @defining(modelDecoder(f._2.model,f._2.required)) { validations =>
                    f@i <- c.downField("@{f._1}").as[@getModelType(f._2.model,f._2.required)]@validations
                }
            }
        } yield {
            @getModelType(model, true) (
                @for((f,i) <- model.fields.zipWithIndex) {
                  `@{f._1}` = f@i @if(i < model.fields.size -1){,}
                }
            )
        }
    }
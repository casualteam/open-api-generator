@()

object Validation {
    def min[T](min: T)(value:T)(implicit num: Numeric[T]): Either[Error, T] =
        if (num.compare(value, min) < 0) Left(Error(s"Number must be at least $min")) else Right(value)

    def max[T](max: T)(value:T)(implicit num: Numeric[T]): Either[Error, T] =
        if (num.compare(value, max) > 0) Left(Error(s"Number must be at most $max")) else Right(value)

    def minLength[T<:Seq[_]](minLength: Int)(value:T): Either[Error, T] =
        if (value.size < minLength) Right(value) else Left(Error(s"Array must be have least $minLength elements"))

    def maxLength[T<:Seq[_]](maxLength: Int)(value:T): Either[Error, T] =
        if (value.size > maxLength) Right(value) else Left(Error(s"Array must be have most $maxLength elements"))

    def minLengthString(minLength: Int)(value:String): Either[Error, String] =
        if (value.size < minLength) Right(value) else Left(Error(s"The value must be at least $minLength long"))

    def maxLengthString(maxLength: Int)(value:String): Either[Error, String] =
        if (value.size > maxLength) Right(value) else Left(Error(s"The value must be at least maxLength long"))
}

@(
    operations: List[casualteam.openapigenerator.Operation],
    getOperationName: casualteam.openapigenerator.Operation => String,
    getResponseType: casualteam.openapigenerator.Response => String,
    getModelType: (casualteam.openapigenerator.Model, Boolean) => String,
    getRequestBodyName: casualteam.openapigenerator.RequestBody => String,
    getRequestBodyTypeParam: casualteam.openapigenerator.RequestBody => String
 )

import akka.util.Timeout

import akka.http.scaladsl.server.Directives._
import akka.http.scaladsl.model.StatusCodes
import akka.http.scaladsl.server.Route

import scala.concurrent.duration._
import scala.concurrent.Future

@operationHandling(operation: casualteam.openapigenerator.Operation) = {
    @defining(operation.path.flatMap(_.right.toOption) ++ operation.queryParameters ++ operation.headerParameters){ parameters =>
        val request = Operations.@getOperationName(operation)Request(
            @if(operation.requestBody.isDefined){
                @getRequestBodyName(operation.requestBody.get) = @getRequestBodyName(operation.requestBody.get) @if(parameters.nonEmpty){,}
            }
            @for((p,i) <- parameters.zipWithIndex) {
              @{p.name} = @{p.name} @if(i < parameters.size -1){,}
            }
        )
    }
    ???
}

object OperationImpl {
    @for(operation <- operations){
        lazy val @getOperationName(operation)Path =
            path {
                @{operation.path
                    .map(_.fold(
                        resource => "\"" + resource + "\"",
                        pathParam => "Segment"
                    ))
                    .mkString{"/"}
                }
            } {
                @defining(operation.path.flatMap(_.right.toOption)){ pathParams =>
                    @if(pathParams.nonEmpty){
                        case (@{pathParams.map(_.name).mkString(",")}) =>
                    }
                }

                @for(parameter <- operation.queryParameters){
                    parameters('@{parameter.name})@("{") @{parameter.name} =>
                }
                @for(parameter <- operation.headerParameters){
                    @if(parameter.required){
                        headerValueByName('@{parameter.name})@("{") @{parameter.name} =>
                    }else{
                        optionalHeaderValueByName('@{parameter.name})@("{") @{parameter.name} =>
                    }
                }
                @if(operation.requestBody.isDefined){
                    entity(as[@getRequestBodyTypeParam(operation.requestBody.get)])@("{") @getRequestBodyName(operation.requestBody.get) =>
                }

                @{operation.method.toLowerCase} {
                    @operationHandling(operation)
                }

                @for(_ <- operation.queryParameters){@("}")}
                @for(_ <- operation.headerParameters){@("}")}
                @if(operation.requestBody.isDefined){@("}")}
            }
    }
}
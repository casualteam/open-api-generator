@(
    operations: List[casualteam.openapigenerator.Operation],
    getOperationName: casualteam.openapigenerator.Operation => String,
    getResponseType: casualteam.openapigenerator.Response => String,
    getModelType: (casualteam.openapigenerator.Model, Boolean) => String,
    getRequestBodyName: casualteam.openapigenerator.RequestBody => String,
    getRequestBodyTypeParam: casualteam.openapigenerator.RequestBody => String
 )

trait Operations {
    import Operations._
    @for(operation <- operations) {
        def @getOperationName(operation) (in: @getOperationName(operation)Request): scala.concurrent.Future[@getOperationName(operation)Response]
    }
}

object Operations {
    @for(operation <- operations) {

        case class @getOperationName(operation)Request(
            @if(operation.requestBody.isDefined){
                `@getRequestBodyName(operation.requestBody.get)` : @getRequestBodyTypeParam(operation.requestBody.get)@if(operation.parameters.nonEmpty){,}
            }
            @for((p,i) <- operation.parameters.zipWithIndex) {
              `@{p.name}` : @getModelType(p.model,p.required) @if(i < operation.parameters.size -1){,}
            }
        )

        sealed trait @getOperationName(operation)Response{ def code:Int }
        object @getOperationName(operation)Response {
            @for((statusCode,response) <- operation.responses.iterator) {
                @if(scala.util.Try(Integer.decode(statusCode)).isSuccess){
                    case class `@statusCode` (body: @getResponseType(response) ) extends @getOperationName(operation)Response{ val code: Int = @statusCode }
                } else if(statusCode == "default"){
                    case class default (body: @getResponseType(response), code: Int ) extends @getOperationName(operation)Response
                } else {
                    case class `@statusCode` (body: @getResponseType(response), code: Int  ) extends @getOperationName(operation)Response
                }
            }
        }
    }
}